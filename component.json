{
    "title": "AWS Identity and Access Management",
    "description": "AWS Identity and Access Management AWS Identity and Access Management (IAM) is a\nweb service that you can use to manage users and user permissions under your AWS\naccount. This guide provides descriptions of IAM actions that you can call\nprogrammatically. For general information about IAM, see AWS Identity and Access\nManagement (IAM) [http://aws.amazon.com/iam/]. For the user guide for IAM, see \nUsing IAM [http://docs.aws.amazon.com/IAM/latest/UserGuide/]. \n\nAWS provides SDKs that consist of libraries and sample code for various\nprogramming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The\nSDKs provide a convenient way to create programmatic access to IAM and AWS. For\nexample, the SDKs take care of tasks such as cryptographically signing requests\n(see below), managing errors, and retrying requests automatically. For\ninformation about the AWS SDKs, including how to download and install them, see\nthe Tools for Amazon Web Services [http://aws.amazon.com/tools/] page. \n\nWe recommend that you use the AWS SDKs to make programmatic API calls to IAM.\nHowever, you can also use the IAM Query API to make direct calls to the IAM web\nservice. To learn more about the IAM Query API, see Making Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html] in the \nUsing IAM guide. IAM supports GET and POST requests for all actions. That is,\nthe API does not require you to use GET for some actions and POST for others.\nHowever, GET requests are subject to the limitation size of a URL. Therefore,\nfor operations that require larger sizes, use a POST request. \n\n Signing Requests \n\nRequests must be signed using an access key ID and a secret access key. We\nstrongly recommend that you do not use your AWS account access key ID and secret\naccess key for everyday work with IAM. You can use the access key ID and secret\naccess key for an IAM user or you can use the AWS Security Token Service to\ngenerate temporary security credentials and use those to sign requests.\n\nTo sign requests, we recommend that you use Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html]. If you\nhave an existing application that uses Signature Version 2, you do not have to\nupdate it to use Signature Version 4. However, some operations now require\nSignature Version 4. The documentation for operations that require version 4\nindicate this requirement. \n\n Additional Resources \n\nFor more information, see the following:\n\n *   AWS Security Credentials\n   [http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html].\n   This topic provides general information about the types of credentials used\n   for accessing AWS. \n   \n   \n *   IAM Best Practices\n   [http://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html]. This\n   topic presents a list of suggestions for using the IAM service to help secure\n   your AWS resources. \n   \n   \n *   Signing AWS API Requests\n   [http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html].\n   This set of topics walk you through the process of signing a request using an\n   access key ID and secret access key.",
    "docsUrl": "https://aws.amazon.com/iam/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/iam/2010-05-08/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://iam.amazonaws.com/",
                    "http://iam.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AddClientIDToOpenIDConnectProvider": {
            "main": "./lib/actions/AddClientIDToOpenIDConnectProvider.js",
            "title": "AddClientIDToOpenIDConnectProvider",
            "description": "Adds a new client ID (also known as audience) to the list of client IDs already\nregistered for the specified IAM OpenID Connect (OIDC) provider resource.\n\nThis operation is idempotent; it does not fail or return an error if you add an\nexisting client ID to the provider.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddClientIDToOpenIDConnectProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AddRoleToInstanceProfile": {
            "main": "./lib/actions/AddRoleToInstanceProfile.js",
            "title": "AddRoleToInstanceProfile",
            "description": "Adds the specified IAM role to the specified instance profile. An instance\nprofile can contain only one role, and this limit cannot be increased. You can\nremove the existing role and then add a different role to an instance profile.\nYou must then wait for the change to appear across all of AWS because of \neventual consistency [https://en.wikipedia.org/wiki/Eventual_consistency]. To\nforce the change, you must disassociate the instance profile\n[http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html] \nand then associate the instance profile\n[http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html]\n, or you can stop your instance and then restart it.\n\nThe caller of this API must be granted the PassRole permission on the IAM role\nby a permissions policy.\n\nFor more information about roles, go to Working with Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html]. For\nmore information about instance profiles, go to About Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddRoleToInstanceProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AddUserToGroup": {
            "main": "./lib/actions/AddUserToGroup.js",
            "title": "AddUserToGroup",
            "description": "Adds the specified user to the specified group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddUserToGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AttachGroupPolicy": {
            "main": "./lib/actions/AttachGroupPolicy.js",
            "title": "AttachGroupPolicy",
            "description": "Attaches the specified managed policy to the specified IAM group.\n\nYou use this API to attach a managed policy to a group. To embed an inline\npolicy in a group, use PutGroupPolicy.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AttachGroupPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AttachRolePolicy": {
            "main": "./lib/actions/AttachRolePolicy.js",
            "title": "AttachRolePolicy",
            "description": "Attaches the specified managed policy to the specified IAM role. When you attach\na managed policy to a role, the managed policy becomes part of the role's\npermission (access) policy.\n\nYou cannot use a managed policy as the role's trust policy. The role's trust\npolicy is created at the same time as the role, using CreateRole. You can update\na role's trust policy using UpdateAssumeRolePolicy.\n\nUse this API to attach a managed policy to a role. To embed an inline policy in\na role, use PutRolePolicy. For more information about policies, see Managed\nPolicies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AttachRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AttachUserPolicy": {
            "main": "./lib/actions/AttachUserPolicy.js",
            "title": "AttachUserPolicy",
            "description": "Attaches the specified managed policy to the specified user.\n\nYou use this API to attach a managed policy to a user. To embed an inline policy\nin a user, use PutUserPolicy.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AttachUserPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ChangePassword": {
            "main": "./lib/actions/ChangePassword.js",
            "title": "ChangePassword",
            "description": "Changes the password of the IAM user who is calling this operation. The AWS\naccount root user password is not affected by this operation.\n\nTo change the password for a different user, see UpdateLoginProfile. For more\ninformation about modifying passwords, see Managing Passwords\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ChangePassword.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAccessKey": {
            "main": "./lib/actions/CreateAccessKey.js",
            "title": "CreateAccessKey",
            "description": " Creates a new AWS secret access key and corresponding AWS access key ID for the\nspecified user. The default status for new keys is Active.\n\nIf you do not specify a user name, IAM determines the user name implicitly based\non the AWS access key ID signing the request. This operation works for access\nkeys under the AWS account. Consequently, you can use this operation to manage\nAWS account root user credentials. This is true even if the AWS account has no\nassociated users.\n\n For information about limits on the number of keys you can create, see \nLimitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.\n\nTo ensure the security of your AWS account, the secret access key is accessible\nonly during key and user creation. You must save the key (for example, in a text\nfile) if you want to be able to access it again. If a secret key is lost, you\ncan delete the access keys for the associated user and then create new keys.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAccessKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAccountAlias": {
            "main": "./lib/actions/CreateAccountAlias.js",
            "title": "CreateAccountAlias",
            "description": "Creates an alias for your AWS account. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAccountAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateGroup": {
            "main": "./lib/actions/CreateGroup.js",
            "title": "CreateGroup",
            "description": "Creates a new group.\n\n For information about the number of groups you can create, see Limitations on\nIAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateInstanceProfile": {
            "main": "./lib/actions/CreateInstanceProfile.js",
            "title": "CreateInstanceProfile",
            "description": " Creates a new instance profile. For information about instance profiles, go to \nAbout Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].\n\n For information about the number of instance profiles you can create, see \nLimitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateInstanceProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateLoginProfile": {
            "main": "./lib/actions/CreateLoginProfile.js",
            "title": "CreateLoginProfile",
            "description": " Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateLoginProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateOpenIDConnectProvider": {
            "main": "./lib/actions/CreateOpenIDConnectProvider.js",
            "title": "CreateOpenIDConnectProvider",
            "description": "Creates an IAM entity to describe an identity provider (IdP) that supports \nOpenID Connect (OIDC) [http://openid.net/connect/].\n\nThe OIDC provider that you create with this operation can be used as a principal\nin a role's trust policy. Such a policy establishes a trust relationship between\nAWS and the OIDC provider.\n\nWhen you create the IAM OIDC provider, you specify the following:\n\n *  The URL of the OIDC identity provider (IdP) to trust\n   \n   \n *  A list of client IDs (also known as audiences) that identify the application\n   or applications that are allowed to authenticate using the OIDC provider\n   \n   \n *  A list of thumbprints of the server certificate(s) that the IdP uses.\n   \n   \n\nYou get all of this information from the OIDC IdP that you want to use to access\nAWS.\n\nBecause trust for the OIDC provider is derived from the IAM provider that this\noperation creates, it is best to limit access to the CreateOpenIDConnectProvider \noperation to highly privileged users.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateOpenIDConnectProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreatePolicy": {
            "main": "./lib/actions/CreatePolicy.js",
            "title": "CreatePolicy",
            "description": "Creates a new managed policy for your AWS account.\n\nThis operation creates a policy version with a version identifier of v1 and sets\nv1 as the policy's default version. For more information about policy versions,\nsee Versioning for Managed Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html] \nin the IAM User Guide.\n\nFor more information about managed policies in general, see Managed Policies and\nInline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreatePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreatePolicyVersion": {
            "main": "./lib/actions/CreatePolicyVersion.js",
            "title": "CreatePolicyVersion",
            "description": "Creates a new version of the specified managed policy. To update a managed\npolicy, you create a new policy version. A managed policy can have up to five\nversions. If the policy has five versions, you must delete an existing version\nusing DeletePolicyVersion before you create a new version.\n\nOptionally, you can set the new version as the policy's default version. The\ndefault version is the version that is in effect for the IAM users, groups, and\nroles to which the policy is attached.\n\nFor more information about managed policy versions, see Versioning for Managed\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreatePolicyVersion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateRole": {
            "main": "./lib/actions/CreateRole.js",
            "title": "CreateRole",
            "description": "Creates a new role for your AWS account. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateSAMLProvider": {
            "main": "./lib/actions/CreateSAMLProvider.js",
            "title": "CreateSAMLProvider",
            "description": "Creates an IAM resource that describes an identity provider (IdP) that supports\nSAML 2.0.\n\nThe SAML provider resource that you create with this operation can be used as a\nprincipal in an IAM role's trust policy. Such a policy can enable federated\nusers who sign-in using the SAML IdP to assume the role. You can create an IAM\nrole that supports Web-based single sign-on (SSO) to the AWS Management Console\nor one that supports API access to AWS.\n\nWhen you create the SAML provider resource, you upload a SAML metadata document\nthat you get from your IdP. That document includes the issuer's name, expiration\ninformation, and keys that can be used to validate the SAML authentication\nresponse (assertions) that the IdP sends. You must generate the metadata\ndocument using the identity management software that is used as your\norganization's IdP.\n\n This operation requires Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].\n\n For more information, see Enabling SAML 2.0 Federated Users to Access the AWS\nManagement Console\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html] \nand About SAML 2.0-based Federation\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateSAMLProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateServiceLinkedRole": {
            "main": "./lib/actions/CreateServiceLinkedRole.js",
            "title": "CreateServiceLinkedRole",
            "description": "Creates an IAM role that is linked to a specific AWS service. The service\ncontrols the attached policies and when the role can be deleted. This helps\nensure that the service is not broken by an unexpectedly changed or deleted\nrole, which could put your AWS resources into an unknown state. Allowing the\nservice to control the role helps improve service stability and proper cleanup\nwhen a service and its role are no longer needed. For more information, see \nUsing Service-Linked Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html] \nin the IAM User Guide. \n\nTo attach a policy to this service-linked role, you must make the request using\nthe AWS service that depends on this role.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateServiceLinkedRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateServiceSpecificCredential": {
            "main": "./lib/actions/CreateServiceSpecificCredential.js",
            "title": "CreateServiceSpecificCredential",
            "description": "Generates a set of credentials consisting of a user name and password that can\nbe used to access the service specified in the request. These credentials are\ngenerated by IAM, and can be used only for the specified service. \n\nYou can have a maximum of two sets of service-specific credentials for each\nsupported service per user.\n\nThe only supported service at this time is AWS CodeCommit.\n\nYou can reset the password to a new service-generated value by calling \nResetServiceSpecificCredential.\n\nFor more information about service-specific credentials, see Using IAM with AWS\nCodeCommit: Git Credentials, SSH Keys, and AWS Access Keys\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateServiceSpecificCredential.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateUser": {
            "main": "./lib/actions/CreateUser.js",
            "title": "CreateUser",
            "description": "Creates a new IAM user for your AWS account.\n\n For information about limitations on the number of IAM users you can create,\nsee Limitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualMFADevice": {
            "main": "./lib/actions/CreateVirtualMFADevice.js",
            "title": "CreateVirtualMFADevice",
            "description": "Creates a new virtual MFA device for the AWS account. After creating the virtual\nMFA, use EnableMFADevice to attach the MFA device to an IAM user. For more\ninformation about creating and working with virtual MFA devices, go to Using a\nVirtual MFA Device\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html] in the \nIAM User Guide.\n\nFor information about limits on the number of MFA devices you can create, see \nLimitations on Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.\n\nThe seed information contained in the QR code and the Base32 string should be\ntreated like any other secret access information, such as your AWS access keys\nor your passwords. After you provision your virtual device, you should ensure\nthat the information is destroyed following secure procedures.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualMFADevice.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeactivateMFADevice": {
            "main": "./lib/actions/DeactivateMFADevice.js",
            "title": "DeactivateMFADevice",
            "description": "Deactivates the specified MFA device and removes it from association with the\nuser name for which it was originally enabled.\n\nFor more information about creating and working with virtual MFA devices, go to \nEnabling a Virtual Multi-factor Authentication (MFA) Device\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeactivateMFADevice.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAccessKey": {
            "main": "./lib/actions/DeleteAccessKey.js",
            "title": "DeleteAccessKey",
            "description": "Deletes the access key pair associated with the specified IAM user.\n\nIf you do not specify a user name, IAM determines the user name implicitly based\non the AWS access key ID signing the request. This operation works for access\nkeys under the AWS account. Consequently, you can use this operation to manage\nAWS account root user credentials even if the AWS account has no associated\nusers.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccessKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAccountAlias": {
            "main": "./lib/actions/DeleteAccountAlias.js",
            "title": "DeleteAccountAlias",
            "description": " Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAccountPasswordPolicy": {
            "main": "./lib/actions/DeleteAccountPasswordPolicy.js",
            "title": "DeleteAccountPasswordPolicy",
            "description": "Deletes the password policy for the AWS account. There are no parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountPasswordPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteGroup": {
            "main": "./lib/actions/DeleteGroup.js",
            "title": "DeleteGroup",
            "description": "Deletes the specified IAM group. The group must not contain any users or have any attached policies.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteGroupPolicy": {
            "main": "./lib/actions/DeleteGroupPolicy.js",
            "title": "DeleteGroupPolicy",
            "description": "Deletes the specified inline policy that is embedded in the specified IAM group.\n\nA group can also have managed policies attached to it. To detach a managed\npolicy from a group, use DetachGroupPolicy. For more information about policies,\nrefer to Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteGroupPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteInstanceProfile": {
            "main": "./lib/actions/DeleteInstanceProfile.js",
            "title": "DeleteInstanceProfile",
            "description": "Deletes the specified instance profile. The instance profile must not have an\nassociated role.\n\nMake sure that you do not have any Amazon EC2 instances running with the\ninstance profile you are about to delete. Deleting a role or instance profile\nthat is associated with a running instance will break any applications running\non the instance.\n\nFor more information about instance profiles, go to About Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteInstanceProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteLoginProfile": {
            "main": "./lib/actions/DeleteLoginProfile.js",
            "title": "DeleteLoginProfile",
            "description": "Deletes the password for the specified IAM user, which terminates the user's\nability to access AWS services through the AWS Management Console.\n\n Deleting a user's password does not prevent a user from accessing AWS through\nthe command line interface or the API. To prevent all user access, you must also\neither make any access keys inactive or delete them. For more information about\nmaking keys inactive or deleting them, see UpdateAccessKey and DeleteAccessKey.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteLoginProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteOpenIDConnectProvider": {
            "main": "./lib/actions/DeleteOpenIDConnectProvider.js",
            "title": "DeleteOpenIDConnectProvider",
            "description": "Deletes an OpenID Connect identity provider (IdP) resource object in IAM.\n\nDeleting an IAM OIDC provider resource does not update any roles that reference\nthe provider as a principal in their trust policies. Any attempt to assume a\nrole that references a deleted provider fails.\n\nThis operation is idempotent; it does not fail or return an error if you call\nthe operation for a provider that does not exist.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteOpenIDConnectProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeletePolicy": {
            "main": "./lib/actions/DeletePolicy.js",
            "title": "DeletePolicy",
            "description": "Deletes the specified managed policy.\n\nBefore you can delete a managed policy, you must first detach the policy from\nall users, groups, and roles that it is attached to. In addition, you must\ndelete all the policy's versions. The following steps describe the process for\ndeleting a managed policy:\n\n *  Detach the policy from all users, groups, and roles that the policy is\n   attached to, using the DetachUserPolicy, DetachGroupPolicy, or \n   DetachRolePolicy API operations. To list all the users, groups, and roles\n   that a policy is attached to, use ListEntitiesForPolicy.\n   \n   \n *  Delete all versions of the policy using DeletePolicyVersion. To list the\n   policy's versions, use ListPolicyVersions. You cannot use DeletePolicyVersion \n   to delete the version that is marked as the default version. You delete the\n   policy's default version in the next step of the process.\n   \n   \n *  Delete the policy (this automatically deletes the policy's default version)\n   using this API.\n   \n   \n\nFor information about managed policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeletePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeletePolicyVersion": {
            "main": "./lib/actions/DeletePolicyVersion.js",
            "title": "DeletePolicyVersion",
            "description": "Deletes the specified version from the specified managed policy.\n\nYou cannot delete the default version from a policy using this API. To delete\nthe default version from a policy, use DeletePolicy. To find out which version\nof a policy is marked as the default version, use ListPolicyVersions.\n\nFor information about versions for managed policies, see Versioning for Managed\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeletePolicyVersion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRole": {
            "main": "./lib/actions/DeleteRole.js",
            "title": "DeleteRole",
            "description": "Deletes the specified role. The role must not have any policies attached. For\nmore information about roles, go to Working with Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html].\n\nMake sure that you do not have any Amazon EC2 instances running with the role\nyou are about to delete. Deleting a role or instance profile that is associated\nwith a running instance will break any applications running on the instance.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRolePermissionsBoundary": {
            "main": "./lib/actions/DeleteRolePermissionsBoundary.js",
            "title": "DeleteRolePermissionsBoundary",
            "description": "Deletes the permissions boundary for the specified IAM role. \n\nDeleting the permissions boundary for a role might increase its permissions by\nallowing anyone who assumes the role to perform all the actions granted in its\npermissions policies.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRolePermissionsBoundary.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRolePolicy": {
            "main": "./lib/actions/DeleteRolePolicy.js",
            "title": "DeleteRolePolicy",
            "description": "Deletes the specified inline policy that is embedded in the specified IAM role.\n\nA role can also have managed policies attached to it. To detach a managed policy\nfrom a role, use DetachRolePolicy. For more information about policies, refer to \nManaged Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteSAMLProvider": {
            "main": "./lib/actions/DeleteSAMLProvider.js",
            "title": "DeleteSAMLProvider",
            "description": "Deletes a SAML provider resource in IAM.\n\nDeleting the provider resource from IAM does not update any roles that reference\nthe SAML provider resource's ARN as a principal in their trust policies. Any\nattempt to assume a role that references a non-existent provider resource ARN\nfails.\n\n This operation requires Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSAMLProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteSSHPublicKey": {
            "main": "./lib/actions/DeleteSSHPublicKey.js",
            "title": "DeleteSSHPublicKey",
            "description": "Deletes the specified SSH public key.\n\nThe SSH public key deleted by this operation is used only for authenticating the\nassociated IAM user to an AWS CodeCommit repository. For more information about\nusing SSH keys to authenticate to an AWS CodeCommit repository, see Set up AWS\nCodeCommit for SSH Connections\n[http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html] \nin the AWS CodeCommit User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSSHPublicKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteServerCertificate": {
            "main": "./lib/actions/DeleteServerCertificate.js",
            "title": "DeleteServerCertificate",
            "description": "Deletes the specified server certificate.\n\nFor more information about working with server certificates, see Working with\nServer Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html] \nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM.\n\n If you are using a server certificate with Elastic Load Balancing, deleting the\ncertificate could have implications for your application. If Elastic Load\nBalancing doesn't detect the deletion of bound certificates, it may continue to\nuse the certificates. This could cause Elastic Load Balancing to stop accepting\ntraffic. We recommend that you remove the reference to the certificate from\nElastic Load Balancing before using this command to delete the certificate. For\nmore information, go to DeleteLoadBalancerListeners\n[http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html] \nin the Elastic Load Balancing API Reference.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteServerCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteServiceLinkedRole": {
            "main": "./lib/actions/DeleteServiceLinkedRole.js",
            "title": "DeleteServiceLinkedRole",
            "description": "Submits a service-linked role deletion request and returns a DeletionTaskId,\nwhich you can use to check the status of the deletion. Before you call this\noperation, confirm that the role has no active sessions and that any resources\nused by the role in the linked service are deleted. If you call this operation\nmore than once for the same service-linked role and an earlier deletion task is\nnot complete, then the DeletionTaskId of the earlier request is returned.\n\nIf you submit a deletion request for a service-linked role whose linked service\nis still accessing a resource, then the deletion task fails. If it fails, the \nGetServiceLinkedRoleDeletionStatus API operation returns the reason for the\nfailure, usually including the resources that must be deleted. To delete the\nservice-linked role, you must first remove those resources from the linked\nservice and then submit the deletion request again. Resources are specific to\nthe service that is linked to the role. For more information about removing\nresources from a service, see the AWS documentation\n[http://docs.aws.amazon.com/] for your service.\n\nFor more information about service-linked roles, see Roles Terms and Concepts:\nAWS Service-Linked Role\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteServiceLinkedRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteServiceSpecificCredential": {
            "main": "./lib/actions/DeleteServiceSpecificCredential.js",
            "title": "DeleteServiceSpecificCredential",
            "description": "Deletes the specified service-specific credential.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteServiceSpecificCredential.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteSigningCertificate": {
            "main": "./lib/actions/DeleteSigningCertificate.js",
            "title": "DeleteSigningCertificate",
            "description": "Deletes a signing certificate associated with the specified IAM user.\n\nIf you do not specify a user name, IAM determines the user name implicitly based\non the AWS access key ID signing the request. This operation works for access\nkeys under the AWS account. Consequently, you can use this operation to manage\nAWS account root user credentials even if the AWS account has no associated IAM\nusers.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteSigningCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteUser": {
            "main": "./lib/actions/DeleteUser.js",
            "title": "DeleteUser",
            "description": "Deletes the specified IAM user. The user must not belong to any groups or have any access keys, signing certificates, MFA devices enabled for AWS, or attached policies.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteUserPermissionsBoundary": {
            "main": "./lib/actions/DeleteUserPermissionsBoundary.js",
            "title": "DeleteUserPermissionsBoundary",
            "description": "Deletes the permissions boundary for the specified IAM user.\n\nDeleting the permissions boundary for a user might increase its permissions by\nallowing the user to perform all the actions granted in its permissions\npolicies.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteUserPermissionsBoundary.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteUserPolicy": {
            "main": "./lib/actions/DeleteUserPolicy.js",
            "title": "DeleteUserPolicy",
            "description": "Deletes the specified inline policy that is embedded in the specified IAM user.\n\nA user can also have managed policies attached to it. To detach a managed policy\nfrom a user, use DetachUserPolicy. For more information about policies, refer to \nManaged Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteUserPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualMFADevice": {
            "main": "./lib/actions/DeleteVirtualMFADevice.js",
            "title": "DeleteVirtualMFADevice",
            "description": "Deletes a virtual MFA device.\n\n You must deactivate a user's virtual MFA device before you can delete it. For\ninformation about deactivating MFA devices, see DeactivateMFADevice.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualMFADevice.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DetachGroupPolicy": {
            "main": "./lib/actions/DetachGroupPolicy.js",
            "title": "DetachGroupPolicy",
            "description": "Removes the specified managed policy from the specified IAM group.\n\nA group can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteGroupPolicy API. For information about policies, see \nManaged Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DetachGroupPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DetachRolePolicy": {
            "main": "./lib/actions/DetachRolePolicy.js",
            "title": "DetachRolePolicy",
            "description": "Removes the specified managed policy from the specified role.\n\nA role can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteRolePolicy API. For information about policies, see \nManaged Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DetachRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DetachUserPolicy": {
            "main": "./lib/actions/DetachUserPolicy.js",
            "title": "DetachUserPolicy",
            "description": "Removes the specified managed policy from the specified user.\n\nA user can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteUserPolicy API. For information about policies, see \nManaged Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DetachUserPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableMFADevice": {
            "main": "./lib/actions/EnableMFADevice.js",
            "title": "EnableMFADevice",
            "description": "Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableMFADevice.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GenerateCredentialReport": {
            "main": "./lib/actions/GenerateCredentialReport.js",
            "title": "GenerateCredentialReport",
            "description": " Generates a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GenerateCredentialReport.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GenerateServiceLastAccessedDetails": {
            "main": "./lib/actions/GenerateServiceLastAccessedDetails.js",
            "title": "GenerateServiceLastAccessedDetails",
            "description": "Generates a request for a report that includes details about when an IAM\nresource (user, group, role, or policy) was last used in an attempt to access\nAWS services. Recent activity usually appears within four hours. IAM reports\nactivity for the last 365 days, or less if your region began supporting this\nfeature within the last year. For more information, see Regions Where Data Is\nTracked\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period]\n.\n\nThe service last accessed data includes all attempts to access an AWS API, not\njust the successful ones. This includes all attempts that were made using the\nAWS Management Console, the AWS API through any of the SDKs, or any of the\ncommand line tools. An unexpected entry in the service last accessed data does\nnot mean that your account has been compromised, because the request might have\nbeen denied. Refer to your CloudTrail logs as the authoritative source for\ninformation about all API calls and whether they were successful or denied\naccess. For more information, seeLogging IAM Events with CloudTrail\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html] in\nthe IAM User Guide.\n\nThe GenerateServiceLastAccessedDetails operation returns a JobId. Use this\nparameter in the following operations to retrieve the following details from\nyour report: \n\n *   GetServiceLastAccessedDetails - Use this operation for users, groups, roles,\n   or policies to list every AWS service that the resource could access using\n   permissions policies. For each service, the response includes information\n   about the most recent access attempt. \n   \n   \n *   GetServiceLastAccessedDetailsWithEntities - Use this operation for groups\n   and policies to list information about the associated entities (users or\n   roles) that attempted to access a specific AWS service. \n   \n   \n\nTo check the status of the GenerateServiceLastAccessedDetails request, use the \nJobId parameter in the same operations and test the JobStatus response\nparameter.\n\nFor additional information about the permissions policies that allow an identity\n(user, group, or role) to access specific services, use the \nListPoliciesGrantingServiceAccess operation.\n\nService last accessed data does not use other policy types when determining\nwhether a resource could access a service. These other policy types include\nresource-based policies, access control lists, AWS Organizations policies, IAM\npermissions boundaries, and AWS STS assume role policies. It only applies\npermissions policy logic. For more about the evaluation of policy types, see \nEvaluating Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics] \nin the IAM User Guide.\n\nFor more information about service last accessed data, see Reducing Policy Scope\nby Viewing User Activity\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GenerateServiceLastAccessedDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAccessKeyLastUsed": {
            "main": "./lib/actions/GetAccessKeyLastUsed.js",
            "title": "GetAccessKeyLastUsed",
            "description": "Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and region that were specified in the last request made with that key.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAccessKeyLastUsed.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAccountAuthorizationDetails": {
            "main": "./lib/actions/GetAccountAuthorizationDetails.js",
            "title": "GetAccountAuthorizationDetails",
            "description": "Retrieves information about all IAM users, groups, roles, and policies in your\nAWS account, including their relationships to one another. Use this API to\nobtain a snapshot of the configuration of IAM permissions (users, groups, roles,\nand policies) in your account.\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n\nYou can optionally filter the results using the Filter parameter. You can\npaginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountAuthorizationDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAccountPasswordPolicy": {
            "main": "./lib/actions/GetAccountPasswordPolicy.js",
            "title": "GetAccountPasswordPolicy",
            "description": "Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountPasswordPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAccountSummary": {
            "main": "./lib/actions/GetAccountSummary.js",
            "title": "GetAccountSummary",
            "description": "Retrieves information about IAM entity usage and IAM quotas in the AWS account.\n\n For information about limitations on IAM entities, see Limitations on IAM\nEntities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAccountSummary.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetContextKeysForCustomPolicy": {
            "main": "./lib/actions/GetContextKeysForCustomPolicy.js",
            "title": "GetContextKeysForCustomPolicy",
            "description": "Gets a list of all of the context keys referenced in the input policies. The\npolicies are supplied as a list of one or more strings. To get the context keys\nfrom policies associated with an IAM user, group, or role, use \nGetContextKeysForPrincipalPolicy.\n\nContext keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. Context keys can be evaluated\nby testing against a value specified in an IAM policy. Use \nGetContextKeysForCustomPolicy to understand what key names and values you must\nsupply when you call SimulateCustomPolicy. Note that all parameters are shown in\nunencoded form here for clarity but must be URL encoded to be included as a part\nof a real HTML request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetContextKeysForCustomPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetContextKeysForPrincipalPolicy": {
            "main": "./lib/actions/GetContextKeysForPrincipalPolicy.js",
            "title": "GetContextKeysForPrincipalPolicy",
            "description": "Gets a list of all of the context keys referenced in all the IAM policies that\nare attached to the specified IAM entity. The entity can be an IAM user, group,\nor role. If you specify a user, then the request also includes all of the\npolicies attached to groups that the user is a member of.\n\nYou can optionally include a list of one or more additional policies, specified\nas strings. If you want to include only a list of policies by string, use \nGetContextKeysForCustomPolicy instead.\n\n Note: This API discloses information about the permissions granted to other\nusers. If you do not want users to see other user's permissions, then consider\nallowing them to use GetContextKeysForCustomPolicy instead.\n\nContext keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. Context keys can be evaluated\nby testing against a value in an IAM policy. Use \nGetContextKeysForPrincipalPolicy to understand what key names and values you\nmust supply when you call SimulatePrincipalPolicy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetContextKeysForPrincipalPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetCredentialReport": {
            "main": "./lib/actions/GetCredentialReport.js",
            "title": "GetCredentialReport",
            "description": " Retrieves a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetCredentialReport.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetGroup": {
            "main": "./lib/actions/GetGroup.js",
            "title": "GetGroup",
            "description": " Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetGroupPolicy": {
            "main": "./lib/actions/GetGroupPolicy.js",
            "title": "GetGroupPolicy",
            "description": "Retrieves the specified inline policy document that is embedded in the specified\nIAM group.\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n\nAn IAM group can also have managed policies attached to it. To retrieve a\nmanaged policy document that is attached to a group, use GetPolicy to determine\nthe policy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetGroupPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetInstanceProfile": {
            "main": "./lib/actions/GetInstanceProfile.js",
            "title": "GetInstanceProfile",
            "description": " Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetInstanceProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLoginProfile": {
            "main": "./lib/actions/GetLoginProfile.js",
            "title": "GetLoginProfile",
            "description": "Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLoginProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetOpenIDConnectProvider": {
            "main": "./lib/actions/GetOpenIDConnectProvider.js",
            "title": "GetOpenIDConnectProvider",
            "description": "Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetOpenIDConnectProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetPolicy": {
            "main": "./lib/actions/GetPolicy.js",
            "title": "GetPolicy",
            "description": "Retrieves information about the specified managed policy, including the policy's\ndefault version and the total number of IAM users, groups, and roles to which\nthe policy is attached. To retrieve the list of the specific users, groups, and\nroles that the policy is attached to, use the ListEntitiesForPolicy API. This\nAPI returns metadata about the policy. To retrieve the actual policy document\nfor a specific version of the policy, use GetPolicyVersion.\n\nThis API retrieves information about managed policies. To retrieve information\nabout an inline policy that is embedded with an IAM user, group, or role, use\nthe GetUserPolicy, GetGroupPolicy, or GetRolePolicy API.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetPolicyVersion": {
            "main": "./lib/actions/GetPolicyVersion.js",
            "title": "GetPolicyVersion",
            "description": "Retrieves information about the specified version of the specified managed\npolicy, including the policy document.\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n\nTo list the available versions for a policy, use ListPolicyVersions.\n\nThis API retrieves information about managed policies. To retrieve information\nabout an inline policy that is embedded in a user, group, or role, use the \nGetUserPolicy, GetGroupPolicy, or GetRolePolicy API.\n\nFor more information about the types of policies, see Managed Policies and\nInline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nFor more information about managed policy versions, see Versioning for Managed\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetPolicyVersion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetRole": {
            "main": "./lib/actions/GetRole.js",
            "title": "GetRole",
            "description": "Retrieves information about the specified role, including the role's path, GUID,\nARN, and the role's trust policy that grants permission to assume the role. For\nmore information about roles, see Working with Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html].\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetRolePolicy": {
            "main": "./lib/actions/GetRolePolicy.js",
            "title": "GetRolePolicy",
            "description": "Retrieves the specified inline policy document that is embedded with the\nspecified IAM role.\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n\nAn IAM role can also have managed policies attached to it. To retrieve a managed\npolicy document that is attached to a role, use GetPolicy to determine the\npolicy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nFor more information about roles, see Using Roles to Delegate Permissions and\nFederate Identities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetSAMLProvider": {
            "main": "./lib/actions/GetSAMLProvider.js",
            "title": "GetSAMLProvider",
            "description": "Returns the SAML provider metadocument that was uploaded when the IAM SAML\nprovider resource object was created or updated.\n\nThis operation requires Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetSAMLProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetSSHPublicKey": {
            "main": "./lib/actions/GetSSHPublicKey.js",
            "title": "GetSSHPublicKey",
            "description": "Retrieves the specified SSH public key, including metadata about the key.\n\nThe SSH public key retrieved by this operation is used only for authenticating\nthe associated IAM user to an AWS CodeCommit repository. For more information\nabout using SSH keys to authenticate to an AWS CodeCommit repository, see Set up\nAWS CodeCommit for SSH Connections\n[http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html] \nin the AWS CodeCommit User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetSSHPublicKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetServerCertificate": {
            "main": "./lib/actions/GetServerCertificate.js",
            "title": "GetServerCertificate",
            "description": "Retrieves information about the specified server certificate stored in IAM.\n\nFor more information about working with server certificates, see Working with\nServer Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html] \nin the IAM User Guide. This topic includes a list of AWS services that can use\nthe server certificates that you manage with IAM.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetServerCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetServiceLastAccessedDetails": {
            "main": "./lib/actions/GetServiceLastAccessedDetails.js",
            "title": "GetServiceLastAccessedDetails",
            "description": "After you generate a user, group, role, or policy report using the \nGenerateServiceLastAccessedDetails operation, you can use the JobId parameter in \nGetServiceLastAccessedDetails. This operation retrieves the status of your\nreport job and a list of AWS services that the resource (user, group, role, or\nmanaged policy) can access.\n\nService last accessed data does not use other policy types when determining\nwhether a resource could access a service. These other policy types include\nresource-based policies, access control lists, AWS Organizations policies, IAM\npermissions boundaries, and AWS STS assume role policies. It only applies\npermissions policy logic. For more about the evaluation of policy types, see \nEvaluating Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics] \nin the IAM User Guide.\n\nFor each service that the resource could access using permissions policies, the\noperation returns details about the most recent access attempt. If there was no\nattempt, the service is listed without details about the most recent attempt to\naccess the service. If the operation fails, the GetServiceLastAccessedDetails \noperation returns the reason that it failed.\n\nThe GetServiceLastAccessedDetails operation returns a list of services that\nincludes the number of entities that have attempted to access the service and\nthe date and time of the last attempt. It also returns the ARN of the following\nentity, depending on the resource ARN that you used to generate the report:\n\n *   User - Returns the user ARN that you used to generate the report\n   \n   \n *   Group - Returns the ARN of the group member (user) that last attempted to\n   access the service\n   \n   \n *   Role - Returns the role ARN that you used to generate the report\n   \n   \n *   Policy - Returns the ARN of the user or role that last used the policy to\n   attempt to access the service\n   \n   \n\nBy default, the list is sorted by service namespace.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetServiceLastAccessedDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetServiceLastAccessedDetailsWithEntities": {
            "main": "./lib/actions/GetServiceLastAccessedDetailsWithEntities.js",
            "title": "GetServiceLastAccessedDetailsWithEntities",
            "description": "After you generate a group or policy report using the \nGenerateServiceLastAccessedDetails operation, you can use the JobId parameter in \nGetServiceLastAccessedDetailsWithEntities. This operation retrieves the status\nof your report job and a list of entities that could have used group or policy\npermissions to access the specified service.\n\n *   Group - For a group report, this operation returns a list of users in the\n   group that could have used the group's policies in an attempt to access the\n   service.\n   \n   \n *   Policy - For a policy report, this operation returns a list of entities\n   (users or roles) that could have used the policy in an attempt to access the\n   service.\n   \n   \n\nYou can also use this operation for user or role reports to retrieve details\nabout those entities.\n\nIf the operation fails, the GetServiceLastAccessedDetailsWithEntities operation\nreturns the reason that it failed.\n\nBy default, the list of associated entities is sorted by date, with the most\nrecent access listed first.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetServiceLastAccessedDetailsWithEntities.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetServiceLinkedRoleDeletionStatus": {
            "main": "./lib/actions/GetServiceLinkedRoleDeletionStatus.js",
            "title": "GetServiceLinkedRoleDeletionStatus",
            "description": "Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetServiceLinkedRoleDeletionStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetUser": {
            "main": "./lib/actions/GetUser.js",
            "title": "GetUser",
            "description": "Retrieves information about the specified IAM user, including the user's\ncreation date, path, unique ID, and ARN.\n\nIf you do not specify a user name, IAM determines the user name implicitly based\non the AWS access key ID used to sign the request to this API.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetUserPolicy": {
            "main": "./lib/actions/GetUserPolicy.js",
            "title": "GetUserPolicy",
            "description": "Retrieves the specified inline policy document that is embedded in the specified\nIAM user.\n\nPolicies returned by this API are URL-encoded compliant with RFC 3986\n[https://tools.ietf.org/html/rfc3986]. You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n\nAn IAM user can also have managed policies attached to it. To retrieve a managed\npolicy document that is attached to a user, use GetPolicy to determine the\npolicy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n\nFor more information about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetUserPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAccessKeys": {
            "main": "./lib/actions/ListAccessKeys.js",
            "title": "ListAccessKeys",
            "description": "Returns information about the access key IDs associated with the specified IAM\nuser. If there is none, the operation returns an empty list.\n\nAlthough each user is limited to a small number of keys, you can still paginate\nthe results using the MaxItems and Marker parameters.\n\nIf the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users.\n\nTo ensure the security of your AWS account, the secret access key is accessible\nonly during key and user creation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAccessKeys.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAccountAliases": {
            "main": "./lib/actions/ListAccountAliases.js",
            "title": "ListAccountAliases",
            "description": "Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAccountAliases.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAttachedGroupPolicies": {
            "main": "./lib/actions/ListAttachedGroupPolicies.js",
            "title": "ListAttachedGroupPolicies",
            "description": "Lists all managed policies that are attached to the specified IAM group.\n\nAn IAM group can also have inline policies embedded with it. To list the inline\npolicies for a group, use the ListGroupPolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified group (or none that match the specified path prefix), the operation\nreturns an empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAttachedGroupPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAttachedRolePolicies": {
            "main": "./lib/actions/ListAttachedRolePolicies.js",
            "title": "ListAttachedRolePolicies",
            "description": "Lists all managed policies that are attached to the specified IAM role.\n\nAn IAM role can also have inline policies embedded with it. To list the inline\npolicies for a role, use the ListRolePolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified role (or none that match the specified path prefix), the operation\nreturns an empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAttachedRolePolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAttachedUserPolicies": {
            "main": "./lib/actions/ListAttachedUserPolicies.js",
            "title": "ListAttachedUserPolicies",
            "description": "Lists all managed policies that are attached to the specified IAM user.\n\nAn IAM user can also have inline policies embedded with it. To list the inline\npolicies for a user, use the ListUserPolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified group (or none that match the specified path prefix), the operation\nreturns an empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAttachedUserPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListEntitiesForPolicy": {
            "main": "./lib/actions/ListEntitiesForPolicy.js",
            "title": "ListEntitiesForPolicy",
            "description": "Lists all IAM users, groups, and roles that the specified managed policy is\nattached to.\n\nYou can use the optional EntityFilter parameter to limit the results to a\nparticular type of entity (users, groups, or roles). For example, to list only\nthe roles that are attached to the specified policy, set EntityFilter to Role.\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListEntitiesForPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListGroupPolicies": {
            "main": "./lib/actions/ListGroupPolicies.js",
            "title": "ListGroupPolicies",
            "description": "Lists the names of the inline policies that are embedded in the specified IAM\ngroup.\n\nAn IAM group can also have managed policies attached to it. To list the managed\npolicies that are attached to a group, use ListAttachedGroupPolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified group, the operation returns\nan empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListGroupPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListGroups": {
            "main": "./lib/actions/ListGroups.js",
            "title": "ListGroups",
            "description": "Lists the IAM groups that have the specified path prefix.\n\n You can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListGroups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListGroupsForUser": {
            "main": "./lib/actions/ListGroupsForUser.js",
            "title": "ListGroupsForUser",
            "description": "Lists the IAM groups that the specified IAM user belongs to.\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListGroupsForUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListInstanceProfiles": {
            "main": "./lib/actions/ListInstanceProfiles.js",
            "title": "ListInstanceProfiles",
            "description": "Lists the instance profiles that have the specified path prefix. If there are\nnone, the operation returns an empty list. For more information about instance\nprofiles, go to About Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListInstanceProfiles.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListInstanceProfilesForRole": {
            "main": "./lib/actions/ListInstanceProfilesForRole.js",
            "title": "ListInstanceProfilesForRole",
            "description": "Lists the instance profiles that have the specified associated IAM role. If\nthere are none, the operation returns an empty list. For more information about\ninstance profiles, go to About Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListInstanceProfilesForRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListMFADevices": {
            "main": "./lib/actions/ListMFADevices.js",
            "title": "ListMFADevices",
            "description": "Lists the MFA devices for an IAM user. If the request includes a IAM user name,\nthen this operation lists all the MFA devices associated with the specified\nuser. If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID signing the request for this API.\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListMFADevices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListOpenIDConnectProviders": {
            "main": "./lib/actions/ListOpenIDConnectProviders.js",
            "title": "ListOpenIDConnectProviders",
            "description": "Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListOpenIDConnectProviders.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListPolicies": {
            "main": "./lib/actions/ListPolicies.js",
            "title": "ListPolicies",
            "description": "Lists all the managed policies that are available in your AWS account, including\nyour own customer-defined managed policies and all AWS managed policies.\n\nYou can filter the list of policies that is returned using the optional \nOnlyAttached, Scope, and PathPrefix parameters. For example, to list only the\ncustomer managed policies in your AWS account, set Scope to Local. To list only\nAWS managed policies, set Scope to AWS.\n\nYou can paginate the results using the MaxItems and Marker parameters.\n\nFor more information about managed policies, see Managed Policies and Inline\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListPoliciesGrantingServiceAccess": {
            "main": "./lib/actions/ListPoliciesGrantingServiceAccess.js",
            "title": "ListPoliciesGrantingServiceAccess",
            "description": "Retrieves a list of policies that the IAM identity (user, group, or role) can\nuse to access each specified service.\n\nThis operation does not use other policy types when determining whether a\nresource could access a service. These other policy types include resource-based\npolicies, access control lists, AWS Organizations policies, IAM permissions\nboundaries, and AWS STS assume role policies. It only applies permissions policy\nlogic. For more about the evaluation of policy types, see Evaluating Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics] \nin the IAM User Guide.\n\nThe list of policies returned by the operation depends on the ARN of the\nidentity that you provide.\n\n *   User - The list of policies includes the managed and inline policies that\n   are attached to the user directly. The list also includes any additional\n   managed and inline policies that are attached to the group to which the user\n   belongs. \n   \n   \n *   Group - The list of policies includes only the managed and inline policies\n   that are attached to the group directly. Policies that are attached to the\n   group's user are not included.\n   \n   \n *   Role - The list of policies includes only the managed and inline policies\n   that are attached to the role.\n   \n   \n\nFor each managed policy, this operation returns the ARN and policy name. For\neach inline policy, it returns the policy name and the entity to which it is\nattached. Inline policies do not have an ARN. For more information about these\npolicy types, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html] \nin the IAM User Guide.\n\nPolicies that are attached to users and roles as permissions boundaries are not\nreturned. To view which managed policy is currently used to set the permissions\nboundary for a user or role, use the GetUser or GetRole operations.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListPoliciesGrantingServiceAccess.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListPolicyVersions": {
            "main": "./lib/actions/ListPolicyVersions.js",
            "title": "ListPolicyVersions",
            "description": "Lists information about the versions of the specified managed policy, including\nthe version that is currently set as the policy's default version.\n\nFor more information about managed policies, see Managed Policies and Inline\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListPolicyVersions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRolePolicies": {
            "main": "./lib/actions/ListRolePolicies.js",
            "title": "ListRolePolicies",
            "description": "Lists the names of the inline policies that are embedded in the specified IAM\nrole.\n\nAn IAM role can also have managed policies attached to it. To list the managed\npolicies that are attached to a role, use ListAttachedRolePolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified role, the operation returns\nan empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRolePolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRoleTags": {
            "main": "./lib/actions/ListRoleTags.js",
            "title": "ListRoleTags",
            "description": "Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRoleTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRoles": {
            "main": "./lib/actions/ListRoles.js",
            "title": "ListRoles",
            "description": "Lists the IAM roles that have the specified path prefix. If there are none, the\noperation returns an empty list. For more information about roles, go to Working\nwith Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html].\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRoles.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListSAMLProviders": {
            "main": "./lib/actions/ListSAMLProviders.js",
            "title": "ListSAMLProviders",
            "description": "Lists the SAML provider resource objects defined in IAM in the account.\n\n This operation requires Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListSAMLProviders.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListSSHPublicKeys": {
            "main": "./lib/actions/ListSSHPublicKeys.js",
            "title": "ListSSHPublicKeys",
            "description": "Returns information about the SSH public keys associated with the specified IAM\nuser. If there none exists, the operation returns an empty list.\n\nThe SSH public keys returned by this operation are used only for authenticating\nthe IAM user to an AWS CodeCommit repository. For more information about using\nSSH keys to authenticate to an AWS CodeCommit repository, see Set up AWS\nCodeCommit for SSH Connections\n[http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html] \nin the AWS CodeCommit User Guide.\n\nAlthough each user is limited to a small number of keys, you can still paginate\nthe results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListSSHPublicKeys.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListServerCertificates": {
            "main": "./lib/actions/ListServerCertificates.js",
            "title": "ListServerCertificates",
            "description": "Lists the server certificates stored in IAM that have the specified path prefix.\nIf none exist, the operation returns an empty list.\n\n You can paginate the results using the MaxItems and Marker parameters.\n\nFor more information about working with server certificates, see Working with\nServer Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html] \nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListServerCertificates.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListServiceSpecificCredentials": {
            "main": "./lib/actions/ListServiceSpecificCredentials.js",
            "title": "ListServiceSpecificCredentials",
            "description": "Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html\">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListServiceSpecificCredentials.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListSigningCertificates": {
            "main": "./lib/actions/ListSigningCertificates.js",
            "title": "ListSigningCertificates",
            "description": "Returns information about the signing certificates associated with the specified\nIAM user. If there none exists, the operation returns an empty list.\n\nAlthough each user is limited to a small number of signing certificates, you can\nstill paginate the results using the MaxItems and Marker parameters.\n\nIf the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request for this API. This\noperation works for access keys under the AWS account. Consequently, you can use\nthis operation to manage AWS account root user credentials even if the AWS\naccount has no associated users.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListSigningCertificates.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListUserPolicies": {
            "main": "./lib/actions/ListUserPolicies.js",
            "title": "ListUserPolicies",
            "description": "Lists the names of the inline policies embedded in the specified IAM user.\n\nAn IAM user can also have managed policies attached to it. To list the managed\npolicies that are attached to a user, use ListAttachedUserPolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nYou can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified user, the operation returns\nan empty list.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListUserPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListUserTags": {
            "main": "./lib/actions/ListUserTags.js",
            "title": "ListUserTags",
            "description": "Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListUserTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListUsers": {
            "main": "./lib/actions/ListUsers.js",
            "title": "ListUsers",
            "description": "Lists the IAM users that have the specified path prefix. If no path prefix is\nspecified, the operation returns all users in the AWS account. If there are\nnone, the operation returns an empty list.\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListUsers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualMFADevices": {
            "main": "./lib/actions/ListVirtualMFADevices.js",
            "title": "ListVirtualMFADevices",
            "description": "Lists the virtual MFA devices defined in the AWS account by assignment status.\nIf you do not specify an assignment status, the operation returns a list of all\nvirtual MFA devices. Assignment status can be Assigned, Unassigned, or Any.\n\nYou can paginate the results using the MaxItems and Marker parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualMFADevices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutGroupPolicy": {
            "main": "./lib/actions/PutGroupPolicy.js",
            "title": "PutGroupPolicy",
            "description": "Adds or updates an inline policy document that is embedded in the specified IAM\ngroup.\n\nA user can also have managed policies attached to it. To attach a managed policy\nto a group, use AttachGroupPolicy. To create a new managed policy, use \nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nFor information about limits on the number of inline policies that you can embed\nin a group, see Limitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.\n\nBecause policy documents can be large, you should use POST rather than GET when\ncalling PutGroupPolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutGroupPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutRolePermissionsBoundary": {
            "main": "./lib/actions/PutRolePermissionsBoundary.js",
            "title": "PutRolePermissionsBoundary",
            "description": "Adds or updates the policy that is specified as the IAM role's permissions\nboundary. You can use an AWS managed policy or a customer managed policy to set\nthe boundary for a role. Use the boundary to control the maximum permissions\nthat the role can have. Setting a permissions boundary is an advanced feature\nthat can affect the permissions for the role.\n\nYou cannot set the boundary for a service-linked role. \n\nPolicies used as permissions boundaries do not provide permissions. You must\nalso attach a permissions policy to the role. To learn how the effective\npermissions for a role are evaluated, see IAM JSON Policy Evaluation Logic\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutRolePermissionsBoundary.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutRolePolicy": {
            "main": "./lib/actions/PutRolePolicy.js",
            "title": "PutRolePolicy",
            "description": "Adds or updates an inline policy document that is embedded in the specified IAM\nrole.\n\nWhen you embed an inline policy in a role, the inline policy is used as part of\nthe role's access (permissions) policy. The role's trust policy is created at\nthe same time as the role, using CreateRole. You can update a role's trust\npolicy using UpdateAssumeRolePolicy. For more information about IAM roles, go to \nUsing Roles to Delegate Permissions and Federate Identities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html].\n\nA role can also have a managed policy attached to it. To attach a managed policy\nto a role, use AttachRolePolicy. To create a new managed policy, use \nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nFor information about limits on the number of inline policies that you can embed\nwith a role, see Limitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.\n\nBecause policy documents can be large, you should use POST rather than GET when\ncalling PutRolePolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutUserPermissionsBoundary": {
            "main": "./lib/actions/PutUserPermissionsBoundary.js",
            "title": "PutUserPermissionsBoundary",
            "description": "Adds or updates the policy that is specified as the IAM user's permissions\nboundary. You can use an AWS managed policy or a customer managed policy to set\nthe boundary for a user. Use the boundary to control the maximum permissions\nthat the user can have. Setting a permissions boundary is an advanced feature\nthat can affect the permissions for the user.\n\nPolicies that are used as permissions boundaries do not provide permissions. You\nmust also attach a permissions policy to the user. To learn how the effective\npermissions for a user are evaluated, see IAM JSON Policy Evaluation Logic\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutUserPermissionsBoundary.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutUserPolicy": {
            "main": "./lib/actions/PutUserPolicy.js",
            "title": "PutUserPolicy",
            "description": "Adds or updates an inline policy document that is embedded in the specified IAM\nuser.\n\nAn IAM user can also have a managed policy attached to it. To attach a managed\npolicy to a user, use AttachUserPolicy. To create a new managed policy, use \nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.\n\nFor information about limits on the number of inline policies that you can embed\nin a user, see Limitations on IAM Entities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html] in\nthe IAM User Guide.\n\nBecause policy documents can be large, you should use POST rather than GET when\ncalling PutUserPolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutUserPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveClientIDFromOpenIDConnectProvider": {
            "main": "./lib/actions/RemoveClientIDFromOpenIDConnectProvider.js",
            "title": "RemoveClientIDFromOpenIDConnectProvider",
            "description": "Removes the specified client ID (also known as audience) from the list of client\nIDs registered for the specified IAM OpenID Connect (OIDC) provider resource\nobject.\n\nThis operation is idempotent; it does not fail or return an error if you try to\nremove a client ID that does not exist.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveClientIDFromOpenIDConnectProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveRoleFromInstanceProfile": {
            "main": "./lib/actions/RemoveRoleFromInstanceProfile.js",
            "title": "RemoveRoleFromInstanceProfile",
            "description": "Removes the specified IAM role from the specified EC2 instance profile.\n\nMake sure that you do not have any Amazon EC2 instances running with the role\nyou are about to remove from the instance profile. Removing a role from an\ninstance profile that is associated with a running instance might break any\napplications running on the instance.\n\n For more information about IAM roles, go to Working with Roles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html]. For\nmore information about instance profiles, go to About Instance Profiles\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveRoleFromInstanceProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveUserFromGroup": {
            "main": "./lib/actions/RemoveUserFromGroup.js",
            "title": "RemoveUserFromGroup",
            "description": "Removes the specified user from the specified group.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveUserFromGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ResetServiceSpecificCredential": {
            "main": "./lib/actions/ResetServiceSpecificCredential.js",
            "title": "ResetServiceSpecificCredential",
            "description": "Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ResetServiceSpecificCredential.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ResyncMFADevice": {
            "main": "./lib/actions/ResyncMFADevice.js",
            "title": "ResyncMFADevice",
            "description": "Synchronizes the specified MFA device with its IAM resource object on the AWS\nservers.\n\nFor more information about creating and working with virtual MFA devices, go to \nUsing a Virtual MFA Device\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ResyncMFADevice.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetDefaultPolicyVersion": {
            "main": "./lib/actions/SetDefaultPolicyVersion.js",
            "title": "SetDefaultPolicyVersion",
            "description": "Sets the specified version of the specified policy as the policy's default\n(operative) version.\n\nThis operation affects all users, groups, and roles that the policy is attached\nto. To list the users, groups, and roles that the policy is attached to, use the \nListEntitiesForPolicy API.\n\nFor information about managed policies, see Managed Policies and Inline Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetDefaultPolicyVersion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SimulateCustomPolicy": {
            "main": "./lib/actions/SimulateCustomPolicy.js",
            "title": "SimulateCustomPolicy",
            "description": "Simulate how a set of IAM policies and optionally a resource-based policy works\nwith a list of API operations and AWS resources to determine the policies'\neffective permissions. The policies are provided as strings.\n\nThe simulation does not perform the API operations; it only checks the\nauthorization to determine if the simulated policies allow or deny the\noperations.\n\nIf you want to simulate existing policies attached to an IAM user, group, or\nrole, use SimulatePrincipalPolicy instead.\n\nContext keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. You can use the Condition \nelement of an IAM policy to evaluate context keys. To get the list of context\nkeys that the policies require for correct simulation, use \nGetContextKeysForCustomPolicy.\n\nIf the output is long, you can use MaxItems and Marker parameters to paginate\nthe results.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SimulateCustomPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SimulatePrincipalPolicy": {
            "main": "./lib/actions/SimulatePrincipalPolicy.js",
            "title": "SimulatePrincipalPolicy",
            "description": "Simulate how a set of IAM policies attached to an IAM entity works with a list\nof API operations and AWS resources to determine the policies' effective\npermissions. The entity can be an IAM user, group, or role. If you specify a\nuser, then the simulation also includes all of the policies that are attached to\ngroups that the user belongs to.\n\nYou can optionally include a list of one or more additional policies specified\nas strings to include in the simulation. If you want to simulate only policies\nspecified as strings, use SimulateCustomPolicy instead.\n\nYou can also optionally include one resource-based policy to be evaluated with\neach of the resources included in the simulation.\n\nThe simulation does not perform the API operations, it only checks the\nauthorization to determine if the simulated policies allow or deny the\noperations.\n\n Note: This API discloses information about the permissions granted to other\nusers. If you do not want users to see other user's permissions, then consider\nallowing them to use SimulateCustomPolicy instead.\n\nContext keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. You can use the Condition \nelement of an IAM policy to evaluate context keys. To get the list of context\nkeys that the policies require for correct simulation, use \nGetContextKeysForPrincipalPolicy.\n\nIf the output is long, you can use the MaxItems and Marker parameters to\npaginate the results.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SimulatePrincipalPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagRole": {
            "main": "./lib/actions/TagRole.js",
            "title": "TagRole",
            "description": "Adds one or more tags to an IAM role. The role can be a regular role or a\nservice-linked role. If a tag with the same key name already exists, then that\ntag is overwritten with the new value.\n\nA tag consists of a key name and an associated value. By assigning tags to your\nresources, you can do the following:\n\n *   Administrative grouping and discovery - Attach tags to resources to aid in\n   organization and search. For example, you could search for all resources with\n   the key name Project and the value MyImportantProject. Or search for all\n   resources with the key name Cost Center and the value 41200. \n   \n   \n *   Access control - Reference tags in IAM user-based and resource-based\n   policies. You can use tags to restrict access to only an IAM user or role\n   that has a specified tag attached. You can also restrict access to only those\n   resources that have a certain tag attached. For examples of policies that\n   show how to use tags to control access, see Control Access Using IAM Tags\n   [http://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html] in the IAM\n   User Guide.\n   \n   \n *   Cost allocation - Use tags to help track which individuals and teams are\n   using which AWS resources.\n   \n   \n\n *  Make sure that you have no invalid tags and that you do not exceed the\n   allowed number of tags per role. In either case, the entire request fails and \n   no tags are added to the role.\n   \n   \n *  AWS always interprets the tag Value as a single string. If you need to store\n   an array, you can store comma-separated values in the string. However, you\n   must interpret the value in your code.\n   \n   \n\nFor more information about tagging, see Tagging IAM Identities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html] in the IAM User\nGuide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagUser": {
            "main": "./lib/actions/TagUser.js",
            "title": "TagUser",
            "description": "Adds one or more tags to an IAM user. If a tag with the same key name already\nexists, then that tag is overwritten with the new value.\n\nA tag consists of a key name and an associated value. By assigning tags to your\nresources, you can do the following:\n\n *   Administrative grouping and discovery - Attach tags to resources to aid in\n   organization and search. For example, you could search for all resources with\n   the key name Project and the value MyImportantProject. Or search for all\n   resources with the key name Cost Center and the value 41200. \n   \n   \n *   Access control - Reference tags in IAM user-based and resource-based\n   policies. You can use tags to restrict access to only an IAM requesting user\n   or to a role that has a specified tag attached. You can also restrict access\n   to only those resources that have a certain tag attached. For examples of\n   policies that show how to use tags to control access, see Control Access\n   Using IAM Tags\n   [http://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html] in the IAM\n   User Guide.\n   \n   \n *   Cost allocation - Use tags to help track which individuals and teams are\n   using which AWS resources.\n   \n   \n\n *  Make sure that you have no invalid tags and that you do not exceed the\n   allowed number of tags per role. In either case, the entire request fails and \n   no tags are added to the role.\n   \n   \n *  AWS always interprets the tag Value as a single string. If you need to store\n   an array, you can store comma-separated values in the string. However, you\n   must interpret the value in your code.\n   \n   \n\nFor more information about tagging, see Tagging IAM Identities\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html] in the IAM User\nGuide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagRole": {
            "main": "./lib/actions/UntagRole.js",
            "title": "UntagRole",
            "description": "Removes the specified tags from the role. For more information about tagging, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagUser": {
            "main": "./lib/actions/UntagUser.js",
            "title": "UntagUser",
            "description": "Removes the specified tags from the user. For more information about tagging, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateAccessKey": {
            "main": "./lib/actions/UpdateAccessKey.js",
            "title": "UpdateAccessKey",
            "description": "Changes the status of the specified access key from Active to Inactive, or vice\nversa. This operation can be used to disable a user's key as part of a key\nrotation workflow.\n\nIf the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users.\n\nFor information about rotating keys, see Managing Keys and Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateAccessKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateAccountPasswordPolicy": {
            "main": "./lib/actions/UpdateAccountPasswordPolicy.js",
            "title": "UpdateAccountPasswordPolicy",
            "description": "Updates the password policy settings for the AWS account.\n\n *  This operation does not support partial updates. No parameters are required,\n   but if you do not specify a parameter, that parameter's value reverts to its\n   default value. See the Request Parameters section for each parameter's\n   default value. Also note that some parameters do not allow the default\n   parameter to be explicitly set. Instead, to invoke the default value, do not\n   include that parameter when you invoke the operation.\n   \n   \n\n For more information about using a password policy, see Managing an IAM\nPassword Policy\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html] \nin the IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateAccountPasswordPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateAssumeRolePolicy": {
            "main": "./lib/actions/UpdateAssumeRolePolicy.js",
            "title": "UpdateAssumeRolePolicy",
            "description": "Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the \"role trust policy\". For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateAssumeRolePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateGroup": {
            "main": "./lib/actions/UpdateGroup.js",
            "title": "UpdateGroup",
            "description": "Updates the name and/or the path of the specified IAM group.\n\n You should understand the implications of changing a group's path or name. For\nmore information, see Renaming Users and Groups\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html] \nin the IAM User Guide.\n\nThe person making the request (the principal), must have permission to change\nthe role group with the old name and the new name. For example, to change the\ngroup named Managers to MGRs, the principal must have a policy that allows them\nto update both groups. If the principal has permission to update the Managers \ngroup, but not the MGRs group, then the update fails. For more information about\npermissions, see Access Management\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateGroup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateLoginProfile": {
            "main": "./lib/actions/UpdateLoginProfile.js",
            "title": "UpdateLoginProfile",
            "description": "Changes the password for the specified IAM user.\n\nIAM users can change their own passwords by calling ChangePassword. For more\ninformation about modifying passwords, see Managing Passwords\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html] in\nthe IAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateLoginProfile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateOpenIDConnectProviderThumbprint": {
            "main": "./lib/actions/UpdateOpenIDConnectProviderThumbprint.js",
            "title": "UpdateOpenIDConnectProviderThumbprint",
            "description": "Replaces the existing list of server certificate thumbprints associated with an\nOpenID Connect (OIDC) provider resource object with a new list of thumbprints.\n\nThe list that you pass with this operation completely replaces the existing list\nof thumbprints. (The lists are not merged.)\n\nTypically, you need to update a thumbprint only when the identity provider's\ncertificate changes, which occurs rarely. However, if the provider's certificate \ndoes change, any attempt to assume an IAM role that specifies the OIDC provider\nas a principal fails until the certificate thumbprint is updated.\n\nTrust for the OIDC provider is derived from the provider's certificate and is\nvalidated by the thumbprint. Therefore, it is best to limit access to the \nUpdateOpenIDConnectProviderThumbprint operation to highly privileged users.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateOpenIDConnectProviderThumbprint.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateRole": {
            "main": "./lib/actions/UpdateRole.js",
            "title": "UpdateRole",
            "description": "Updates the description or maximum session duration setting of a role.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateRole.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateRoleDescription": {
            "main": "./lib/actions/UpdateRoleDescription.js",
            "title": "UpdateRoleDescription",
            "description": "Use UpdateRole instead.\n\nModifies only the description of a role. This operation performs the same\nfunction as the Description parameter in the UpdateRole operation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateRoleDescription.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateSAMLProvider": {
            "main": "./lib/actions/UpdateSAMLProvider.js",
            "title": "UpdateSAMLProvider",
            "description": "Updates the metadata document for an existing SAML provider resource object.\n\nThis operation requires Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateSAMLProvider.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateSSHPublicKey": {
            "main": "./lib/actions/UpdateSSHPublicKey.js",
            "title": "UpdateSSHPublicKey",
            "description": "Sets the status of an IAM user's SSH public key to active or inactive. SSH\npublic keys that are inactive cannot be used for authentication. This operation\ncan be used to disable a user's SSH public key as part of a key rotation work\nflow.\n\nThe SSH public key affected by this operation is used only for authenticating\nthe associated IAM user to an AWS CodeCommit repository. For more information\nabout using SSH keys to authenticate to an AWS CodeCommit repository, see Set up\nAWS CodeCommit for SSH Connections\n[http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html] \nin the AWS CodeCommit User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateSSHPublicKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateServerCertificate": {
            "main": "./lib/actions/UpdateServerCertificate.js",
            "title": "UpdateServerCertificate",
            "description": "Updates the name and/or the path of the specified server certificate stored in\nIAM.\n\nFor more information about working with server certificates, see Working with\nServer Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html] \nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM.\n\nYou should understand the implications of changing a server certificate's path\nor name. For more information, see Renaming a Server Certificate\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts] \nin the IAM User Guide.\n\nThe person making the request (the principal), must have permission to change\nthe server certificate with the old name and the new name. For example, to\nchange the certificate named ProductionCert to ProdCert, the principal must have\na policy that allows them to update both certificates. If the principal has\npermission to update the ProductionCert group, but not the ProdCert certificate,\nthen the update fails. For more information about permissions, see Access\nManagement [http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateServerCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateServiceSpecificCredential": {
            "main": "./lib/actions/UpdateServiceSpecificCredential.js",
            "title": "UpdateServiceSpecificCredential",
            "description": "Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateServiceSpecificCredential.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateSigningCertificate": {
            "main": "./lib/actions/UpdateSigningCertificate.js",
            "title": "UpdateSigningCertificate",
            "description": "Changes the status of the specified user signing certificate from active to\ndisabled, or vice versa. This operation can be used to disable an IAM user's\nsigning certificate as part of a certificate rotation work flow.\n\nIf the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateSigningCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateUser": {
            "main": "./lib/actions/UpdateUser.js",
            "title": "UpdateUser",
            "description": "Updates the name and/or the path of the specified IAM user.\n\n You should understand the implications of changing an IAM user's path or name.\nFor more information, see Renaming an IAM User\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming] \nand Renaming an IAM Group\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html] \nin the IAM User Guide.\n\n To change a user name, the requester must have appropriate permissions on both\nthe source object and the target object. For example, to change Bob to Robert,\nthe entity making the request must have permission on Bob and Robert, or must\nhave permission on all (*). For more information about permissions, see \nPermissions and Policies\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateUser.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadSSHPublicKey": {
            "main": "./lib/actions/UploadSSHPublicKey.js",
            "title": "UploadSSHPublicKey",
            "description": "Uploads an SSH public key and associates it with the specified IAM user.\n\nThe SSH public key uploaded by this operation can be used only for\nauthenticating the associated IAM user to an AWS CodeCommit repository. For more\ninformation about using SSH keys to authenticate to an AWS CodeCommit\nrepository, see Set up AWS CodeCommit for SSH Connections\n[http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html] \nin the AWS CodeCommit User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadSSHPublicKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadServerCertificate": {
            "main": "./lib/actions/UploadServerCertificate.js",
            "title": "UploadServerCertificate",
            "description": "Uploads a server certificate entity for the AWS account. The server certificate\nentity includes a public key certificate, a private key, and an optional\ncertificate chain, which should all be PEM-encoded.\n\nWe recommend that you use AWS Certificate Manager\n[http://docs.aws.amazon.com/certificate-manager/] to provision, manage, and\ndeploy your server certificates. With ACM you can request a certificate, deploy\nit to AWS resources, and let ACM handle certificate renewals for you.\nCertificates provided by ACM are free. For more information about using ACM, see\nthe AWS Certificate Manager User Guide\n[http://docs.aws.amazon.com/acm/latest/userguide/].\n\nFor more information about working with server certificates, see Working with\nServer Certificates\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html] \nin the IAM User Guide. This topic includes a list of AWS services that can use\nthe server certificates that you manage with IAM.\n\nFor information about the number of server certificates you can upload, see \nLimitations on IAM Entities and Objects\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html] in\nthe IAM User Guide.\n\nBecause the body of the public key certificate, private key, and the certificate\nchain can be large, you should use POST rather than GET when calling \nUploadServerCertificate. For information about setting up signatures and\nauthorization through the API, go to Signing AWS API Requests\n[http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html] in\nthe AWS General Reference. For general information about using the Query API\nwith IAM, go to Calling the API by Making HTTP Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html] in the IAM\nUser Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadServerCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadSigningCertificate": {
            "main": "./lib/actions/UploadSigningCertificate.js",
            "title": "UploadSigningCertificate",
            "description": "Uploads an X.509 signing certificate and associates it with the specified IAM\nuser. Some AWS services use X.509 signing certificates to validate requests that\nare signed with a corresponding private key. When you upload the certificate,\nits default status is Active.\n\nIf the UserName field is not specified, the IAM user name is determined\nimplicitly based on the AWS access key ID used to sign the request. This\noperation works for access keys under the AWS account. Consequently, you can use\nthis operation to manage AWS account root user credentials even if the AWS\naccount has no associated users.\n\nBecause the body of an X.509 certificate can be large, you should use POST\nrather than GET when calling UploadSigningCertificate. For information about\nsetting up signatures and authorization through the API, go to Signing AWS API\nRequests\n[http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html] in\nthe AWS General Reference. For general information about using the Query API\nwith IAM, go to Making Query Requests\n[http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html] in the \nIAM User Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadSigningCertificate.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}